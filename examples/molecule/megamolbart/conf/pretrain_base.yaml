name: MegaMolBART
do_training: True # set to false if data preprocessing steps must be completed
do_testing: False # set to true to run evaluation on test data after training, requires test_dataset section
seed: 42
restore_from_path: null # used when starting from a .nemo file
use_peft: False # indicates whether we intend to use PEFT technique; not implemented for this model

trainer:
  devices: 8 # number of GPUs or CPUs
  num_nodes: 8
  precision: 16-mixed # 16-mixed, bf16-mixed, 32
  accelerator: gpu # gpu, cpu
  max_epochs: null # use max_steps instead with NeMo Megatron model
  max_steps: 2000000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 100 # number of interations between logging
  val_check_interval: 10000 # set to integer when using steps to determine frequency of validation, use fraction with epochs
  num_sanity_val_steps: 2 # set to 0 or small number to test validation before training
  limit_train_batches: 1. # number of batches in train step, use fraction for fraction of data
  limit_val_batches: 200 # number of batches in validation step, use fraction for fraction of data, 0 to disable
  limit_test_batches: 0 # number of batches in test step, use fraction for fraction of data, 0 to disable
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  logger: False # logger is provided by NeMo exp_manager
  enable_checkpointing: False # checkpointing is done by NeMo exp_manager
  use_distributed_sampler: False # use NeMo Megatron samplers

model:
  name: ${name}-united-token_head
  # model parallelism
  micro_batch_size: 32
  global_batch_size: null
  tensor_model_parallel_size: 1 # model parallelism
  pipeline_model_parallel_size: 1
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  pipeline_model_parallel_split_rank: 0 # rank at which decoder starts.

  # model architecture
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler

  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.

  seq_length: 128 # maximum sequence length allowed, note that 128 was longer than all 1.8B molecules in the zinc drug-like DB. This will speed up generation.
  max_position_embeddings: ${.seq_length}
  num_layers: 3
  hidden_size: 768
  ffn_hidden_size: ${multiply:${model.hidden_size}, 4} # Transformer FFN hidden size. Usually 4 * hidden_size.
  num_attention_heads: 12
  init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
  attention_dropout: 0.1 # Dropout probability in the attention layer.
  # Values for position embeddings
  position_embedding_type: 'learned_absolute' # Position embedding type. Options ['learned_absolute', 'relative', 'alibi', 'kerple']
  relative_position_bias_self_attention_only: True # Additional argument required for 'relative' 'alibi' and 'kerple' position embedding type
  relative_attention_num_buckets: 32 # Relative position number of buckets for computing the bias
  relative_attention_max_distance: 128 # max_distance to keep relative distance in the attention_num_buckets.
  # ---------------
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  bias_gelu_fusion: True # Use a kernel that fuses the bias addition from weight matrices with the subsequent gelu activation.
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.
  bias_dropout_add_fusion: True # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  bias: True # Whether to use bias terms in all weight matrices.
  normalization: 'layernorm' # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
  encoder_arch: 'transformer' # Options ['transformer', 'normformer']
  decoder_arch: 'transformer' # Options ['transformer', 'normformer']
  activation: 'gelu' # Options ['gelu', 'geglu', 'swiglu', 'reglu']
  headscale: False # Whether to learn extra parameters that scale the output of the each self-attention head.
  share_token_embeddings: True # If True share encoder/decoder embeddings
  share_decoder_tokens_head_embeddings: False # If True share decoder embeddings and decoder projection to logits

  tokenizer:
    library: 'regex'
    type: null
    model: ${oc.env:BIONEMO_HOME}/tokenizers/molecule/megamolbart/vocab/megamolbart.model
    vocab_file: ${oc.env:BIONEMO_HOME}/tokenizers/molecule/megamolbart/vocab/megamolbart.vocab
    merge_file: null

  data:
    links_file: ${oc.env:BIONEMO_HOME}/examples/molecule/megamolbart/dataset/ZINC-downloader.txt # Set to ZINC-downloader-sample.txt for demo
    dataset_path: ${oc.env:BIONEMO_HOME}/data/zinc_csv # parent directory for data, contains train / val / test folders. Needs to be writeable for index creation.
    dataset: # inclusive range of data files to load or can load a single file, e.g. x000 or x[000..186]
      train: x[000..186] # Range is for full dataset
      test: x[000..186]
      val: x[000..186]
    # The following should probably always be True, unless you want to explore the unchanged input data. 
    #  Changing will impact val/test metrics since canonicalization is done to model outputs but not 
    #  targets (assuming it is done here).
    canonicalize_target_smile: True
    # The following four settings will result in randomized augmentation of SMILES for input, and matched output.
    #  this is the equivarant model case.
    canonicalize_encoder_input: False
    canonicalize_decoder_output: False
    encoder_augment: True
    decoder_independent_augment: False
    encoder_mask: True # task = mask(span)_aug
    decoder_mask: False # always False
    mask_prob: 0.1 # mask probability
    span_lambda: 3.0 # max size of poisson distribution for
    micro_batch_size: ${model.micro_batch_size}
    num_workers: 10
    dataloader_type: single
    canonicalize_input: True # canonicalize SMILES with RDKit before enumeration -- True or False
    max_seq_length: ${model.seq_length}
    seed: ${seed}
    skip_lines: 0
    drop_last: False
    pin_memory: False
    index_mapping_dir: null # path to store cached indexing files (if empty, will be stored in the same directory as dataset_path)
    data_impl: "csv_mmap"
    # Supported kwargs (with default values):
    #     text_mmap (newline_int=10, header_lines=0, workers=None, sort_dataset_paths=True)
    #     csv_mmap (newline_int=10, header_lines=0,workers=None, sort_dataset_paths=True, data_col=1, data_sep=",")
    data_impl_kwargs:
      csv_mmap:
        newline_int: 10 # byte-value of newline
        header_lines: 1 # skip first N header lines
        workers: ${model.data.num_workers} # number of workers when creating missing index files (null defaults to cpu_num // 2)
        sort_dataset_paths: True # if True datasets will be sorted by name
        data_sep: ',' # string to split text into columns
        # column number of csv to take values from
        data_col: 1
    use_upsampling: True # if the data should be upsampled to max number of steps in the training

  optim:
    name: fused_adam # fused optimizers used by Megatron model
    lr: 1.0 # max is scaled by Noam scheduler to d_model**(-0.5) * warmup**(-0.5)
    betas:
      - 0.9
      - 0.999
    eps: 1e-8
    weight_decay: 0.01
    sched:
      name: NoamAnnealing
      d_model: ${model.hidden_size}
      warmup_steps: 8000 # use to set warmup_steps explicitly or leave as null to calculate
      warmup_ratio: null # calculate warmup_steps from warmup_ratio * max_steps, but will throw error if max_steps * warmup_ratio < 1
      max_steps: 1000000 # can also use ${trainer.max_steps} to scale
      min_lr: 1e-5

  dwnstr_task_validation:
    enabled: False
    dataset:
      class: bionemo.model.core.dwnstr_task_callbacks.SingleValuePredictionCallback
      task_type: regression
      infer_target: bionemo.model.molecule.megamolbart.infer.MegaMolBARTInference
      max_seq_length: ${model.seq_length}
      emb_batch_size: 128
      batch_size: 128
      num_epochs: 10
      shuffle: True
      num_workers: 8
      dataset_path: ${oc.env:BIONEMO_HOME}/data/physchem/${model.dwnstr_task_validation.dataset.task_name}
      task_name: SAMPL
      dataset:
        train: x000
        test: x000
      sequence_column: 'smiles'
      target_column: 'expt'
      random_seed: 1234
      optim:
        name: adam
        lr: 0.0001
        betas:
          - 0.9
          - 0.999
        eps: 1e-8
        weight_decay: 0.01
        sched:
          name: WarmupAnnealing
          min_lr: 0.00001
          last_epoch: -1
          warmup_ratio: 0.01
          max_steps: 1000

exp_manager:
  name: ${name}

  # checkpoint reloading and saving
  resume_if_exists: True # autmatically resume if checkpoint exists
  resume_ignore_no_checkpoint: True # leave as True, will start new training if resume_if_exists is True but no checkpoint exists
  create_checkpoint_callback: True # leave as True, use exp_manger for for checkpoints
  checkpoint_callback_params:
    save_top_k: 3 # number of checkpoints to save
    monitor: val_molecular_accuracy # use molecular accuracy to select best checkpoints
    mode: max # use min or max of monitored metric to select best checkpoints
    save_last: True # always save last checkpoint
    always_save_nemo: True # not implemented for model parallel, additionally save NeMo-style checkpoint during validation, set to False if checkpoint saving is time consuming
    filename: '${name}-${model.name}--{val_molecular_accuracy:.2f}-{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

  # logging
  exp_dir: ${oc.env:BIONEMO_HOME}/results/nemo_experiments/${.name}/${.wandb_logger_kwargs.name}
  explicit_log_dir: ${.exp_dir}
  create_wandb_logger: True
  create_tensorboard_logger: True
  wandb_logger_kwargs:
    project: ${model.name}_pretraining
    name: ${model.name}_pretraining
    group: ${model.name}
    job_type: Localhost_nodes_${trainer.num_nodes}_gpus_${trainer.devices}
    notes: "date: ${now:%y%m%d-%H%M%S}"
    tags:
      - ${name}
      - ${model.name}
    offline: False # set to True if there are issues uploading to WandB during training
