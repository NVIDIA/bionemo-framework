name: dnabert_base_config
restore_from_path: null # used when starting from a .nemo file

do_training: true # set to true to train a model
do_prediction: false

trainer:
  devices: 2
  num_nodes: 1
  accelerator: gpu
  precision: 16-mixed
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: 1 # PTL default. In practice we don't usually train for more than 1 epoch.
  max_steps: 100000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 100
  limit_val_batches: 50 # number of batches in validation step, use fraction for fraction of data, 0 to disable
  limit_test_batches: 500 # number of batches in test step, use fraction for fraction of data, 0 to disable
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  benchmark: False

exp_manager:
  explicit_log_dir: ${.exp_dir}
  exp_dir: ${oc.env:BIONEMO_HOME}/results/nemo_experiments/${.name}/${.wandb_logger_kwargs.name}
  name: dnabert
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: dnabert-base
    offline: False
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 10
    mode: min
    always_save_nemo: True # saves nemo file during validation, not implemented for model parallel
    filename: 'dnabert--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}


model:
  # model parallelism
  micro_batch_size: 64
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1

  # model architecture
  seq_length: 512
  encoder_seq_length: ${.seq_length}
  max_position_embeddings: ${.seq_length}
  num_layers: 12
  hidden_size: 768
  ffn_hidden_size: 3072 # Transformer FFN hidden size. Usually 4 * hidden_size.
  num_attention_heads: 12
  init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler
  bert_binary_head: False # BERT binary head
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.

  tokenizer:
    type: 'kmer'
    k: ???
    model: ???
    vocab_file: ???


  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16


  # miscellaneous
  seed: 1234
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.

  # not implemented in NeMo yet
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: 1

  data:
    dataset_path: ???
    dataset_class: memmap # Options: 'memmap', 'pyfastx'
    dataset_backend: null # Optional. Required if dataset_class='pyfastx'. Options: 'memory', 'file'.
    discretize_train: False # If True, the reference data for training is chunked.
    data_prefix: ''
    index_mapping_type: 'online'
    block_size: 1000000 # OnlineSampleMapping parameter
    cache_maxsize: 1000000 # OnlineSampleMapping parameter
    truncate_to_block_boundary: false
    shuffle: true
    dataset:
      train: ???
      test: ???
      val: ???
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    skip_warmup: True
    num_workers: 10
    dataloader_type: single # cyclic
    seq_length: ${model.seq_length}
    k: ${model.tokenizer.k}
    seed: ${model.seed}
    dynamic_padding: false # If True, each batch is padded to the maximum sequence length within that batch.
        #    Set it to False when model.pipeline_model_parallel_size > 1, as pipeline parallelism requires fixed-length padding.

  optim:
    name: fused_adam
    lr: 2e-4
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 500
      constant_steps: 50000
      min_lr: 2e-5
