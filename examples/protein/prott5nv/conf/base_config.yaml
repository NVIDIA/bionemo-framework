name: prott5nv
desc: Base parameters for ProtT5nv model 
do_training: True # set to false if data preprocessing steps must be completed
do_testing: False # set to true to run evaluation on test data after training, requires test_dataset section
restore_from_path: null # used when starting from a .nemo file

trainer:
  devices: 2 # number of GPUs or CPUs
  num_nodes: 1
  accelerator: gpu # gpu, cpu
  precision: 16-mixed # 16-mixed, bf16-mixed or 32
  logger: False # logger provided by exp_manager
  enable_checkpointing: False # checkpointing is done by NeMo exp_manager
  use_distributed_sampler: False # use NeMo Megatron samplers
  max_epochs: null # use max_steps instead with NeMo Megatron model
  max_steps: 1000000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10 # number of interations between logging
  val_check_interval: 2000 # set to integer when using steps to determine frequency of validation, use fraction with epochs
  limit_val_batches: 50 # number of batches in validation step, use fraction for fraction of data, 0 to disable
  limit_test_batches: 500 # number of batches in test step, use fraction for fraction of data, 0 to disable
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  benchmark: False

exp_manager:
  name: ${name}
  exp_dir: ${oc.env:BIONEMO_HOME}/results/nemo_experiments/${.name}/${.wandb_logger_kwargs.name}
  explicit_log_dir: ${.exp_dir}
  create_wandb_logger: True 
  create_tensorboard_logger: True
  wandb_logger_kwargs:
    project: ${name}_pretraining
    name: ${name}_pretraining
    group: ${name}
    job_type: Localhost_nodes_${trainer.num_nodes}_gpus_${trainer.devices}
    notes: "date: ${now:%y%m%d-%H%M%S}"
    tags:
      - ${name}
    offline: False # set to True if there are issues uploading to WandB during training
  resume_if_exists: True
  resume_ignore_no_checkpoint: True # leave as True, will start new training if resume_if_exists is True but no checkpoint exists
  create_checkpoint_callback: True # leave as True, use exp_manger for for checkpoints
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 10 # number of checkpoints to save
    mode: min # use min or max of monitored metric to select best checkpoints
    always_save_nemo: True # saves nemo file during validation, not implemented for model parallel
    filename: '${name}--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

model:
  # model parallelism
  micro_batch_size: 1
  global_batch_size: null # compute automatically
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  resume_from_checkpoint: null #/code/nemo/collections/nlp/data/language_modeling/megatron/nemo_experiments/bionemo_prott5_220m_from_pretrained_16_nodes/checkpoints/megatron_t5--val_loss=1.50-step=999999-consumed_samples=2047997952.0.ckpt # manually set the checkpoint file to load from
  pipeline_model_parallel_split_rank: 0 # rank at which decoder starts.

  # model architecture
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler

  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.
  grad_allreduce_chunk_size_mb: 125

  seq_length: 512
  max_position_embeddings: ${.seq_length}
  num_layers: 12 # For perceiver model, this is the number of cross-attention blocks. Each layer has 1 cross-attention and "num_self_attention_per_cross_attention" self-attention layers.
  hidden_size: 768
  ffn_hidden_size: 3072 # Transformer FFN hidden size. Usually 4 * hidden_size.
  num_attention_heads: 12
  init_method_std: 0.015 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
  attention_dropout: 0.1 # Dropout probability in the attention layer.
  # Values for position embeddings
  position_embedding_type: 'learned_absolute' # Position embedding type. Options ['learned_absolute', 'relative', 'alibi', 'kerple']
  relative_position_bias_self_attention_only: True # Additional argument required for 'relative' 'alibi' and 'kerple' position embedding type
  relative_attention_num_buckets: 32 # Relative position number of buckets for computing the bias
  relative_attention_max_distance: 128 # max_distance to keep relative distance in the attention_num_buckets.
  # ---------------
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  bias_activation_fusion: True # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.
  bias_dropout_add_fusion: True # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  bias: True # Whether to use bias terms in all weight matrices.
  normalization: 'layernorm' # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
  encoder_arch: 'transformer' # Options: ['transformer', 'perceiver']
  decoder_arch: 'transformer' # Options: ['transformer']
  activation: 'gelu' # Options ['gelu', 'geglu', 'swiglu', 'reglu']
  headscale: False # Whether to learn extra parameters that scale the output of the each self-attention head.
  transformer_block_type: 'pre_ln' # Options ['pre_ln', 'post_ln', 'normformer']
  hidden_steps: 32 # Number of latent vectors to use for pereceiver encoders
  num_self_attention_per_cross_attention: 1 # Number of self-attention layers for every cross-attention layer.
  share_token_embeddings: True # If True share encoder/decoder embeddings
  share_decoder_tokens_head_embeddings: True # If True share decoder embeddings and decoder projection to logits
  
  tokenizer:
    library: 'sentencepiece'
    type: null
    model: ${oc.env:BIONEMO_HOME}/tokenizers/protein/prott5nv/vocab/protein_sequence_sentencepiece.model
    vocab_file: ${oc.env:BIONEMO_HOME}/tokenizers/protein/prott5nv/vocab/protein_sequence_sentencepiece.vocab
    merge_file: null
    num_sentinel_tokens: 96 # number of sentinel tokens in T5 model, must be greater or equal to (seq_length * masked_lm_prob)

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # miscellaneous
  seed: 1234
  use_cpu_initialization: False # Init weights on the CPU (slow for large model)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

  # not implemented in NeMo yet
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: 1

  data:
    # Path to data must be specified by the user.
    ngc_registry_target: uniref50_2022_05
    ngc_registry_version: v23.06
    dataset_path: ${oc.env:BIONEMO_HOME}/data/uniref2022_05 # parent directory for data, contains train / val / test folders
    dataset: # inclusive range of data files to load or can load a single file (e.g. x000.csv). See data_impl for default file extentions
      train: x000
      test: x000
      val: x000
    data_prefix: null # must be "" or null
    index_mapping_dir: null # path to store cached indexing files (if empty, will be stored in the same directory as dataset_path)
    data_impl: csv_mmap # mmap, retmmap, text_mmap, csv_mmap (.csv will be added to dataset file names if missing)
    # Supported kwargs (with default values): 
    #     text_mmap (newline_int=10, header_lines=0, workers=None, sort_dataset_paths=True)
    #     csv_mmap (newline_int=10, header_lines=0,workers=None, sort_dataset_paths=True, data_col=1, data_sep=",")
    data_impl_kwargs: # currently used only for text_mmap, csv_mmap (should be data_impl dependant)
      csv_mmap:
          newline_int: 10 # byte-value of newline
          header_lines: 1 # skip first N header lines
          workers: null # number of workers when creating missing index files (null defaults to cpu_num // 2)
          sort_dataset_paths: False # if True datasets will be sorted by name
          data_col: 3 # column to use for data
          data_sep: ',' # string to split text into columns
    seq_length: ${model.seq_length} # Input sequence length
    seq_length_dec: 256 # Target sequence length. Must be at least (seq_length * masked_lm_prob * 2 + 1)
    skip_warmup: True
    num_workers: 16
    dataloader_type: single # cyclic
    masked_lm_prob: 0.15 # Probability of replacing a token with mask.
    dataset_type: 't5' # Dataset type must be t5 for ProtT5nv model
    short_seq_prob: 0.0 # Probability of producing a short sequence.
    max_ngram_size: 1 # Must be 1 for amino acids
    mean_ngram_size: null # Not defined for Max Ngram size of 1
    geometric_dist: True
    permutation: False
    whole_word_masking: False # No words in protein data, must be False
    favor_longer_ngrams: False # All Ngrams are of size 1, must be False

  optim:
    name: fused_adam # fused optimizers used by Megatron model
    lr: 0.0001
    betas:
      - 0.9
      - 0.999
    eps: 1.0e-08
    weight_decay: 0.01
    sched:
      name: InverseSquareRootAnnealing
      min_lr: 0.0
      last_epoch: -1
      warmup_ratio: 0.01

  dwnstr_task_validation:
    enabled: False
    dataset:
      class: bionemo.model.core.dwnstr_task_callbacks.PerTokenPredictionCallback
      task_type: token-level-classification
      infer_target: bionemo.model.protein.prott5nv.infer.ProtT5nvInference
      max_seq_length: ${model.seq_length}
      emb_batch_size: 128
      batch_size: 128
      num_epochs: 10
      shuffle: True
      num_workers: 8
      task_name: secondary_structure
      dataset_path: ${oc.env:BIONEMO_HOME}/data/FLIP/${model.dwnstr_task_validation.dataset.task_name}
      dataset:
        train: x000
        test: x000
      sequence_column: "sequence" # name of column with protein sequence in csv file
      target_column: ["3state"] # names of label columns in csv file
      target_sizes: [3] # number of classes in each label
      mask_column: ["resolved"] # names of mask columns in csv file, masks must be 0 or 1
      random_seed: 1234
      optim:
        name: adam
        lr: 0.0001
        betas:
          - 0.9
          - 0.999
        eps: 1e-8
        weight_decay: 0.01
        sched:
          name: WarmupAnnealing
          min_lr: 0.00001
          last_epoch: -1
          warmup_ratio: 0.01
          max_steps: 1000
