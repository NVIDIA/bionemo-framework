#!/usr/bin/env bash

if [[ $(command -v git) ]]; then
  COMMIT=$(git rev-parse HEAD)
  if [[ "$?" != "0" ]]; then
    echo "ERROR: must run from within git repository!"
    exit 1
  fi
else
  echo "ERROR: git is not installed!"
  exit 1
fi

if [[ $(command -v docker) ]]; then
  echo "ERROR: docker is not installed!"
  exit 1
fi

IMAGE_NAME=${IMAGE_NAME:=nvcr.io/nvidian/cvai_bnmo_trng/bionemo}
CACHE_TAG=${CACHE_TAG:='bionemo2-latest'}

LOCAL_REPO_PATH=${LOCAL_REPO_PATH:=$(realpath $(pwd))}
DOCKER_REPO_PATH=${DOCKER_REPO_PATH:=/workspace/bionemo2}
LOCAL_RESULTS_PATH=${LOCAL_RESULTS_PATH:=${LOCAL_REPO_PATH}/results}
DOCKER_RESULTS_PATH=${DOCKER_RESULTS_PATH:=${DOCKER_REPO_PATH}/results}
LOCAL_DATA_PATH=${LOCAL_DATA_PATH:=${LOCAL_REPO_PATH}/data}
DOCKER_DATA_PATH=${DOCKER_DATA_PATH:=${DOCKER_REPO_PATH}/data}
LOCAL_MODELS_PATH=${LOCAL_MODELS_PATH:=${LOCAL_REPO_PATH}/models}
DOCKER_MODELS_PATH=${DOCKER_MODELS_PATH:=${DOCKER_REPO_PATH}/models}
WANDB_API_KEY=${WANDB_API_KEY:=NotSpecified}
JUPYTER_PORT=${JUPYTER_PORT:=8888}
REGISTRY=${REGISTRY:=nvcr.io}
REGISTRY_USER=${REGISTRY_USER:='$oauthtoken'}
DEV_CONT_NAME=${DEV_CONT_NAME:=bionemo2}
NGC_CLI_API_KEY=${NGC_CLI_API_KEY:=NotSpecified}
NGC_CLI_ORG=${NGC_CLI_ORG:=nvidian}
NGC_CLI_TEAM=${NGC_CLI_TEAM:=NotSpecified}
NGC_CLI_FORMAT_TYPE=${NGC_CLI_FORMAT_TYPE:=ascii}

set -euo pipefail

IMAGE_TAG="bionemo2-${COMMIT}"



#Function to build the Docker image
build() {
    version_ge() {
        # Returns 0 (true) if $1 >= $2, 1 (false) otherwise
        [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n1)" = "$2" ]
    }

    # Check Docker version
    docker_version=$(docker --version | awk -F'[, ]' '{print $3}')
    required_docker_version="23.0.1"

    if ! version_ge "$docker_version" "$required_docker_version"; then
        echo "Error: Docker version $required_docker_version or higher is required. Current version: $docker_version"
        exit 1
    fi

    # Check Buildx version
    buildx_version=$(docker buildx version | awk '{print $2}')
    required_buildx_version="0.10.2"

    if ! version_ge "$buildx_version" "$required_buildx_version"; then
        echo "Error: Docker Buildx version $required_buildx_version or higher is required. Current version: $buildx_version"
        exit 1
    fi

    echo "Pulling updated cache"
    docker pull ${IMAGE_NAME}:${CACHE_TAG} || true
    local created_at
    created_at="$(date --iso-8601=seconds -u)"
    echo "Building Docker image..."
    local DOCKER_BUILD_CMD="docker buildx build \
        -t ${IMAGE_NAME}:${IMAGE_TAG} \
        --cache-to type=inline \
	      --cache-from ${IMAGE_NAME}:${CACHE_TAG} \
        --label com.nvidia.bionemo.git_sha=${COMMIT} \
        --label com.nvidia.bionemo.created_at=${created_at} \
        -f ./Dockerfile"
    echo "$DOCKER_BUILD_CMD"
    DOCKER_BUILDKIT=1 $DOCKER_BUILD_CMD .
    if [[ "$?" == "0" ]]; then
      echo "Docker build completed successfully."
    else
      echo "FAILURE: image was not built. Check logs for error."
    fi
}

dev() {
  # Compare Docker version to find Nvidia Container Toolkit support.
  # Please refer https://github.com/NVIDIA/nvidia-docker
  local DOCKER_VERSION
  if [ -x "$(command -v docker)" ]; then
      DOCKER_VERSION=$(docker version | grep -i version | head -1 | awk '{print $2}')
  else
      DOCKER_VERSION=""
  fi

  local DOCKER_VERSION_WITH_GPU_SUPPORT='19.03.0'

  local PARAM_RUNTIME
  if [ "$DOCKER_VERSION_WITH_GPU_SUPPORT" == "$(echo -e "$DOCKER_VERSION\n$DOCKER_VERSION_WITH_GPU_SUPPORT" | sort -V | head -1)" ]; then
      PARAM_RUNTIME="--gpus all"
  else
      PARAM_RUNTIME="--runtime=nvidia"
  fi

  echo "Mounting ~/.ssh, /etc/{passwd,group,shadow} for development"

  local DOCKER_CMD
  DOCKER_CMD="docker run \
    --network host \
    ${PARAM_RUNTIME} \
    -p ${JUPYTER_PORT}:8888 \
    --shm-size=4g \
    -e TMPDIR=/tmp/ \
    -e NUMBA_CACHE_DIR=/tmp/ \
    -e BIONEMO_HOME=$DOCKER_REPO_PATH \
    -e WANDB_API_KEY=$WANDB_API_KEY \
    -e NGC_CLI_API_KEY=$NGC_CLI_API_KEY \
    -e NGC_CLI_ORG=$NGC_CLI_ORG \
    -e NGC_CLI_TEAM=$NGC_CLI_TEAM \
    -e NGC_CLI_FORMAT_TYPE=$NGC_CLI_FORMAT_TYPE \
    -v $LOCAL_REPO_PATH:$DOCKER_REPO_PATH \
    -v ${LOCAL_RESULTS_PATH}:${DOCKER_RESULTS_PATH} \
    -v ${LOCAL_DATA_PATH}:${DOCKER_DATA_PATH} \
    -v ${LOCAL_MODELS_PATH}:${DOCKER_MODELS_PATH} \
    -v /etc/passwd:/etc/passwd:ro \
    -v /etc/group:/etc/group:ro \
    -v /etc/shadow:/etc/shadow:ro \
    -u $(id -u):$(id -g) \
    -e HOME=/workspace/bionemo2 -w /workspace/bionemo2 \
    -v ${HOME}/.ssh:/workspace/bionemo2/.ssh:ro"

    local CMD
    if [[ "$2" != "" ]]; then
      CMD="$2"
    else
      echo "Using bash as the default command. Override with 2nd argument value to exectuable."
      CMD="bash"
    fi

    local IMAGE_TO_RUN="${IMAGE_NAME}:${IMAGE_TAG}"

    set -x
    ${DOCKER_CMD} --name "${DEV_CONT_NAME}" --rm -it "${IMAGE_TO_RUN}" ${CMD}
    set +x
    exit 0
}

set +u
case "$1" in
    build)
        build
        ;;
    dev)
        dev
        ;;
    *)
        echo "Usage: $0 {build||dev [cmd]}"
        echo "-----------------------------------"
        echo "For advanced use, you may override any of the following environment variables:"
        echo "  IMAGE_NAME"
        echo "  CACHE_TAG"
        echo "  LOCAL_REPO_PATH"
        echo "  DOCKER_REPO_PATH"
        echo "  LOCAL_RESULTS_PATH"
        echo "  DOCKER_RESULTS_PATH"
        echo "  LOCAL_DATA_PATH"
        echo "  DOCKER_DATA_PATH"
        echo "  LOCAL_MODELS_PATH"
        echo "  DOCKER_MODELS_PATH"
        echo "  WANDB_API_KEY"
        echo "  JUPYTER_PORT"
        echo "  REGISTRY"
        echo "  REGISTRY_USER"
        echo "  DEV_CONT_NAME"
        echo "  NGC_CLI_API_KEY"
        echo "  NGC_CLI_ORG"
        echo "  NGC_CLI_TEAM"
        echo "  NGC_CLI_FORMAT_TYPE"
        exit 1
        ;;
esac
