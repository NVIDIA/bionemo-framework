#!/usr/bin/env bash

#Name of the Docker image
IMAGE_NAME=${IMAGE_NAME:=nvcr.io/nvidian/cvai_bnmo_trng/bionemo}
COMMIT=$(git rev-parse HEAD)
IMAGE_TAG="bionemo2-${COMMIT}"
CACHE_TAG="bionemo2-latest"

# Defaults for `.env` file
export LOCAL_REPO_PATH
LOCAL_REPO_PATH=$(realpath -s "$(pwd)")
export DOCKER_REPO_PATH=${DOCKER_REPO_PATH:=/workspace/bionemo2}
export LOCAL_RESULTS_PATH=${LOCAL_RESULTS_PATH:=${LOCAL_REPO_PATH}/results}
export DOCKER_RESULTS_PATH=${DOCKER_RESULTS_PATH:=${DOCKER_REPO_PATH}/results}
export LOCAL_DATA_PATH=${LOCAL_DATA_PATH:=${LOCAL_REPO_PATH}/data}
export DOCKER_DATA_PATH=${DOCKER_DATA_PATH:=${DOCKER_REPO_PATH}/data}
export LOCAL_MODELS_PATH=${LOCAL_MODELS_PATH:=${LOCAL_REPO_PATH}/models}
export DOCKER_MODELS_PATH=${DOCKER_MODELS_PATH:=${DOCKER_REPO_PATH}/models}
export WANDB_API_KEY=${WANDB_API_KEY:=NotSpecified}
export JUPYTER_PORT=${JUPYTER_PORT:=8888}
export REGISTRY=${REGISTRY:=nvcr.io}
export REGISTRY_USER=${REGISTRY_USER:='$oauthtoken'}
export DEV_CONT_NAME=${DEV_CONT_NAME:=bionemo2}
export NGC_CLI_API_KEY=${NGC_CLI_API_KEY:=NotSpecified}
export NGC_CLI_ORG=${NGC_CLI_ORG:=nvidian}
export NGC_CLI_TEAM=${NGC_CLI_TEAM:=NotSpecified}
export NGC_CLI_FORMAT_TYPE=${NGC_CLI_FORMAT_TYPE:=ascii}

# Default paths for framework. We switch these depending on whether or not we are inside
# a docker environment. It is assumed that if we are in a docker environment, then it's the
# bionemo image built with `Dockerfile`.

# TODO: deleteme
#if [ -f /.dockerenv ]; then
#    echo "Running inside a Docker container, using DOCKER paths from .env file."
#    RESULT_PATH=${DOCKER_RESULTS_PATH}
#    DATA_PATH=${DOCKER_DATA_PATH}
#    MODEL_PATH=${DOCKER_MODELS_PATH}
#    BIONEMO_HOME=${DOCKER_REPO_PATH}
#else
#    echo "Not running inside a Docker container, using LOCAL paths from .env file."
#    RESULT_PATH=${LOCAL_RESULTS_PATH}
#    DATA_PATH=${LOCAL_DATA_PATH}
#    MODEL_PATH=${LOCAL_MODELS_PATH}
#    BIONEMO_HOME=${LOCAL_REPO_PATH}
#fi


#Function to build the Docker image
build() {
    version_ge() {
        # Returns 0 (true) if $1 >= $2, 1 (false) otherwise
        [ "$(printf '%s\n' "$1" "$2" | sort -V | head -n1)" = "$2" ]
    }

    # Check Docker version
    docker_version=$(docker --version | awk -F'[, ]' '{print $3}')
    required_docker_version="23.0.1"

    if ! version_ge "$docker_version" "$required_docker_version"; then
        echo "Error: Docker version $required_docker_version or higher is required. Current version: $docker_version"
        exit 1
    fi

    # Check Buildx version
    buildx_version=$(docker buildx version | awk '{print $2}')
    required_buildx_version="0.10.2"

    if ! version_ge "$buildx_version" "$required_buildx_version"; then
        echo "Error: Docker Buildx version $required_buildx_version or higher is required. Current version: $buildx_version"
        exit 1
    fi

    echo "Pulling updated cache"
    docker pull ${IMAGE_NAME}:${CACHE_TAG} || true
    local created_at
    created_at="$(date --iso-8601=seconds -u)"
    echo "Building Docker image..."
    local DOCKER_BUILD_CMD="docker buildx build \
        -t ${IMAGE_NAME}:${IMAGE_TAG} \
        --cache-to type=inline \
	    --cache-from ${IMAGE_NAME}:${CACHE_TAG} \
        --label com.nvidia.bionemo.git_sha=${COMMIT} \
        --label com.nvidia.bionemo.created_at=${created_at} \
        -f ./Dockerfile"
    echo "$DOCKER_BUILD_CMD"
    $DOCKER_BUILD_CMD .
    echo "Docker build completed successfully."
}

dev() {
  # Compare Docker version to find Nvidia Container Toolkit support.
  # Please refer https://github.com/NVIDIA/nvidia-docker
  local DOCKER_VERSION
  if [ -x "$(command -v docker)" ]; then
      DOCKER_VERSION=$(docker version | grep -i version | head -1 | awk '{print $2}')
  else
      DOCKER_VERSION=""
  fi

  local DOCKER_VERSION_WITH_GPU_SUPPORT='19.03.0'

  local PARAM_RUNTIME
  if [ "$DOCKER_VERSION_WITH_GPU_SUPPORT" == "$(echo -e "$DOCKER_VERSION\n$DOCKER_VERSION_WITH_GPU_SUPPORT" | sort -V | head -1)" ]; then
      PARAM_RUNTIME="--gpus all"
  else
      PARAM_RUNTIME="--runtime=nvidia"
  fi


  local DOCKER_CMD
  DOCKER_CMD="docker run \
    --network host \
    ${PARAM_RUNTIME} \
    -p ${JUPYTER_PORT}:8888 \
    --shm-size=4g \
    -e TMPDIR=/tmp/ \
    -e NUMBA_CACHE_DIR=/tmp/ "

    # Note: For BIONEMO_HOME, if we are invoking docker, this should always be
    # the docker repo path.
    DOCKER_CMD="${DOCKER_CMD} --env BIONEMO_HOME=$DOCKER_REPO_PATH"
    DOCKER_CMD="${DOCKER_CMD} --env WANDB_API_KEY=$WANDB_API_KEY"
    DOCKER_CMD="${DOCKER_CMD} --env NGC_CLI_API_KEY=$NGC_CLI_API_KEY"
    DOCKER_CMD="${DOCKER_CMD} --env NGC_CLI_ORG=$NGC_CLI_ORG"
    DOCKER_CMD="${DOCKER_CMD} --env NGC_CLI_TEAM=$NGC_CLI_TEAM"
    DOCKER_CMD="${DOCKER_CMD} --env NGC_CLI_FORMAT_TYPE=$NGC_CLI_FORMAT_TYPE"

    # For development work
    DOCKER_CMD="${DOCKER_CMD} -v $LOCAL_REPO_PATH:$DOCKER_REPO_PATH"
    DOCKER_CMD="${DOCKER_CMD} -v ${LOCAL_RESULTS_PATH}:${DOCKER_RESULTS_PATH}"
    DOCKER_CMD="${DOCKER_CMD} -v ${LOCAL_DATA_PATH}:${DOCKER_DATA_PATH}"
    DOCKER_CMD="${DOCKER_CMD} -v ${LOCAL_MODELS_PATH}:${DOCKER_MODELS_PATH}"
    DOCKER_CMD="${DOCKER_CMD} -v /etc/passwd:/etc/passwd:ro "
    DOCKER_CMD="${DOCKER_CMD} -v /etc/group:/etc/group:ro "
    DOCKER_CMD="${DOCKER_CMD} -v /etc/shadow:/etc/shadow:ro "
    DOCKER_CMD="${DOCKER_CMD} -u $(id -u):$(id -g) "
    DOCKER_CMD="${DOCKER_CMD} -e HOME=/workspace/bionemo2 -w /workspace/bionemo2 "

    # For dev mode, mount the local code for development purpose
    # and mount .ssh dir for working with git
    if [[ $1 == "dev" ]]; then
        echo "Mounting ~/.ssh up for development"
        DOCKER_CMD="$DOCKER_CMD -v ${HOME}/.ssh:/workspace/bionemo2/.ssh:ro"
    fi

    local CMD
    CMD="${CMD:-bash}"

    local IMAGE_TO_RUN
    IMAGE_TO_RUN=$IMAGE_NAME:$IMAGE_TAG

    set -x
    ${DOCKER_CMD}  --name ${DEV_CONT_NAME}  --rm -it "${IMAGE_TO_RUN}" ${CMD}
    set +x
    exit 0
}

case "$1" in
    build)
        build
        ;;
    run)
        run
        ;;
    dev)
        dev
        ;;
    pull)
        pull
        ;;
    update_build_cache)
        update_build_cache
        ;;
    build_and_update_cache)
        build_and_update_cache
        ;;
    *)
        echo "Usage: $0 {build|update_build_cache|build_and_update_cache|run|dev|pull}"
        exit 1
        ;;
esac
